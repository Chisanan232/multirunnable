version: 2.1

commands:
  prepare_testing_data:
    steps:
      - run:
         name: Create database
         command: |
            mysql -h 127.0.0.1 -u user -ppassw23mr --execute="CREATE DATABASE tw_stock;"
      - run:
         name: Create table for saving testing data
         command: |
            mysql -h 127.0.0.1 -u user -ppassw23mr --execute="
                CREATE TABLE IF NOT EXISTS tw_stock.stock_data_2330 (
                                                               stock_date DATETIME NOT NULL,
                                                               trade_volume DECIMAL(12,4) NOT NULL,
                                                               turnover_price DECIMAL(16,4) NOT NULL,
                                                               opening_price DECIMAL(8,4) NOT NULL,
                                                               highest_price DECIMAL(8,4) NOT NULL,
                                                               lowest_price DECIMAL(8,4) NOT NULL,
                                                               closing_price DECIMAL(8,4) NOT NULL,
                                                               gross_spread DECIMAL(8,4) NOT NULL,
                                                               turnover_volume DECIMAL(12,4) NOT NULL,
                                                               PRIMARY KEY(stock_date)) DEFAULT CHARSET=utf8;"
      - run:
         name: Insert testing data
         command: |
            mysql -h 127.0.0.1 -u user -ppassw23mr --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-02 00:00:00' , 32900482 , 7276419230 ,226.5000 ,226.5000 , 219.0000, 219.5000 ,-6.00 , 12329);
            mysql -h 127.0.0.1 -u user -ppassw23mr --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-03 00:00:00' , 34615620 , 7459051790 ,214.0000 ,218.0000 , 214.0000 ,215.5000 ,-4.00 , 14549);
            mysql -h 127.0.0.1 -u user -ppassw23mr --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-04 00:00:00' , 67043521 ,13987136785 ,211.5000 ,211.5000 , 206.5000 ,208.0000 ,-7.50 , 28786);
            mysql -h 127.0.0.1 -u user -ppassw23mr --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-07 00:00:00' , 35695176 , 7591116569 ,212.0000 ,214.0000 , 211.0000 ,213.0000 ,+5.00 , 11224);
            mysql -h 127.0.0.1 -u user -ppassw23mr --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-08 00:00:00' , 23794481 , 5019703557 ,212.0000 ,212.5000 , 210.0000 ,211.0000 ,-2.00 , 9377);
            mysql -h 127.0.0.1 -u user -ppassw23mr --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-09 00:00:00' , 51255446 ,11006827093 ,212.0000 ,216.5000 , 211.0000 ,215.5000 ,+4.50 , 14098);"

  isntall_databade_driver_tool:
    steps:
      - run:
         name: Install MySQL driver connection tool
         command: sudo apt-get install default-mysql-client

  test_databade_connection:
    steps:
      - run:
         name: Test MySQL connection
         command: mysql -u root -h 127.0.0.1 -ppassword

  preparing_python_dependecies:
    steps:
      - run:
         name: Check Python Version
         command: python --version
      - run:
         name: Upgrade and install Python dependencies
         command: |
             pip install -U pip
             pip install -U pytest
             pip install -U pytest-cov
             pip install codecov
             pip install mysql-connector-python
             pip install pytest-rerunfailures
             pip install -r dev-requirements.txt
      - run:
         name: Run PyTest command to test
         command: |
             pytest
      - run:
         name: Submit calculation result of testing coverage of project code to codecov
#         command: |
#             coveralls    # submit coverage to coveralls
         command: |
             codecov -t $CODECOV_TOKEN    # submit coverage to codecov

  run_pytest:
    steps:
      - run:
         name: Run PyTest command to test
         command: |
             pytest

  submit_testing_coverage:
    steps:
      - run:
         name: Submit calculation result of testing coverage of project code to codecov
#         command: |
#             coveralls    # submit coverage to coveralls
         command: |
             codecov -t $CODECOV_TOKEN    # submit coverage to codecov

  run_python_test:
    steps:
      - checkout    # this pulls code down from GitHub
      - isntall_databade_driver_tool
      - test_databade_connection
      - preparing_python_dependecies
      - run_pytest
      - submit_testing_coverage


executors:
#  docker-mysql:
#    docker:
#      - image: circleci/mysql:8.0.23
##          auth:
##            username: chisanan232
##            password: $DOCKERHUB_PASSWORD
#      - environment:
#           MYSQL_ROOT_HOST: 127.0.0.1
#           MYSQL_ROOT_PASSWORD: password
#           MYSQL_DATABASE: tw_stock
#           MYSQL_USER: user
#           MYSQL_PASSWORD: passw23mr
#           DB_HOST: 127.0.0.1
#           DB_PORT: 3306

  docker-py37:
    docker:
      - image: circleci/python:3.7
        auth:
          username: chisanan232
          password: $DOCKERHUB_PASSWORD
        environment:
          MYSQL_PASSWORD: 'password'
          MYSQL_DATABASE: 'tw_stock'
          MYSQL_ROOT_HOST: 127.0.0.1
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
      - image: circleci/mysql:8.0.23
        auth:
          username: chisanan232
          password: $DOCKERHUB_PASSWORD
        environment:
          MYSQL_ROOT_HOST: 127.0.0.1
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: tw_stock
          MYSQL_USER: user
          MYSQL_PASSWORD: passw23mr
          DB_HOST: 127.0.0.1
          DB_PORT: 3306


jobs:
  # This is job about database which saving the testing data for ensure the features work finely without any issue.
#  build-testing-database:
#    executor: docker-mysql
#    steps:
#      - prepare_testing_data

#  test-linux-python36:
#    executor: docker-py36
#    steps:
#      - run_python_test

  test-linux-python37:
    executor: docker-py37
    steps:
      - run_python_test

#  test-linux-python38:
#    executor: docker-py38
#    steps:
#      - run_python_test
#
#  test-linux-python39:
#    executor: docker-py39
#    steps:
#      - run_python_test
#
#  test-linux-python310:
#    executor: docker-py310
#    steps:
#      - run_python_test


# Under the workflows: map, we can coordinate above jobs, defined above.
workflows:
  version: 2.1
  build_and_test:    # this is the name of our workflow
    jobs:    # and here we list the jobs we are going to run.
      # General work flow
#      - build-testing-database
      - test-linux-python37
#      - test-linux-python38

      # Sequence work flow
#      - build-testing-database
#      - test-linux-python37:
#           requires:
#             - build-testing-database

