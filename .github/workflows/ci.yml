name: multirunnable testing
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.7,3.8,3.9,3.10]
        os: [ubuntu-18.04,ubuntu-latest]
        exclude:
          - os: ubuntu-18.04
            python-version: 3.9
          - os: ubuntu-18.04
            python-version: 3.10
          - os: ubuntu-latest
            python-version: 3.8
          - os: ubuntu-latest
            python-version: 3.9
          - os: ubuntu-latest
            python-version: 3.10

    services:
      mysql:
        image: mysql:8.0.27
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_ALLOW_EMPTY_PASSWORD: true
        ports:
          - 33306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install MySQL driver connection tool
        run: sudo apt-get install default-mysql-client

      - name: Waiting for MySQL to be ready
        run: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 5
            done
            echo Failed waiting for MySQL && exit 1

      - name: Test MySQL connection
        run: mysql -u root -h 127.0.0.1 -ppassword --execute="show databases;"

      - name: Create database
        run: |
            mysql -h 127.0.0.1 -u root -ppassword --execute="CREATE DATABASE tw_stock;"

      - name: Create table for saving testing data
        run: |
            mysql -h 127.0.0.1 -u root -ppassword --execute="
                CREATE TABLE IF NOT EXISTS tw_stock.stock_data_2330 (
                                                               stock_date DATETIME NOT NULL,
                                                               trade_volume DECIMAL(12,4) NOT NULL,
                                                               turnover_price DECIMAL(16,4) NOT NULL,
                                                               opening_price DECIMAL(8,4) NOT NULL,
                                                               highest_price DECIMAL(8,4) NOT NULL,
                                                               lowest_price DECIMAL(8,4) NOT NULL,
                                                               closing_price DECIMAL(8,4) NOT NULL,
                                                               gross_spread DECIMAL(8,4) NOT NULL,
                                                               turnover_volume DECIMAL(12,4) NOT NULL,
                                                               PRIMARY KEY(stock_date)) DEFAULT CHARSET=utf8;"

      - name: Insert testing data
        run: |
            mysql -h 127.0.0.1 -u root -ppassword --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-02 00:00:00' , 32900482 , 7276419230 ,226.5000 ,226.5000 , 219.0000, 219.5000 ,-6.00 , 12329);"
            mysql -h 127.0.0.1 -u root -ppassword --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-03 00:00:00' , 34615620 , 7459051790 ,214.0000 ,218.0000 , 214.0000 ,215.5000 ,-4.00 , 14549);"
            mysql -h 127.0.0.1 -u root -ppassword --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-04 00:00:00' , 67043521 ,13987136785 ,211.5000 ,211.5000 , 206.5000 ,208.0000 ,-7.50 , 28786);"
            mysql -h 127.0.0.1 -u root -ppassword --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-07 00:00:00' , 35695176 , 7591116569 ,212.0000 ,214.0000 , 211.0000 ,213.0000 ,+5.00 , 11224);"
            mysql -h 127.0.0.1 -u root -ppassword --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-08 00:00:00' , 23794481 , 5019703557 ,212.0000 ,212.5000 , 210.0000 ,211.0000 ,-2.00 , 9377);"
            mysql -h 127.0.0.1 -u root -ppassword --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-09 00:00:00' , 51255446 ,11006827093 ,212.0000 ,216.5000 , 211.0000 ,215.5000 ,+4.50 , 14098);"

      - name: Install Python ${{ matrix.python-version }} in  ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python ${{ matrix.python-version }} dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install codecov
          pip install -U pytest
          pip install -U pytest-cov
          pip install pytest-rerunfailures
          pip install mysql-connector-python
          pip install -r dev-requirements.txt

      - name: Run tests with pytest
        run: pytest

      - name: Get secret token from Base64
        env:
          KEYSTORE_BASE64: ${{ secrets.CODECOV_TOKEN }}
        run: |
          echo import certificate from secrets and regenerate the file
          echo $KEYSTORE_BASE64 | base64 -d > ./codecov.token

      - name: Submit calculation result of testing coverage of project code to codecov
        run: codecov -f ./codecov.token    # submit coverage to codecov

