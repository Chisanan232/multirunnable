name: CI by 'release'

on:
  push:
    branches:
      - "release"
      - "release-**"
      - "release/**"
  pull_request:
    branches:
      - "release"
      - "release-**"
      - "release/**"


jobs:

  prep-testbed-unit-test-core:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash scripts/get-unit-test-core-paths.sh unix)"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}


  prep-testbed-unit-test-persistence:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash scripts/get-unit-test-persistence-paths.sh unix)"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}


  unit-test-core:
    needs: prep-testbed-unit-test-core
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.6, 3.7,3.8,3.9,'3.10']
        os: [ubuntu-18.04,ubuntu-latest, macos-10.15, macos-latest]
        exclude:
          - os: ubuntu-18.04
            python-version: 3.7
          - os: ubuntu-18.04
            python-version: 3.9
          - os: ubuntu-latest
            python-version: 3.6
          - os: ubuntu-latest
            python-version: 3.8
          - os: macos-10.15
            python-version: 3.6
          - os: macos-10.15
            python-version: 3.8    # Pickle Issue
          - os: macos-latest
            python-version: 3.7
          - os: macos-latest
            python-version: 3.8    # Pickle Issue
        test-path: ${{fromJson(needs.prep-testbed-unit-test-core.outputs.matrix)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Python Runtime environment and dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('*requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup Python ${{ matrix.python-version }} in  ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python ${{ matrix.python-version }} dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install codecov
          pip install -U pytest
          pip install -U pytest-cov
          pip install pytest-rerunfailures
          pip install -r dev-requirements.txt

      - name: Change the setting of option *open files* of resource limit
        run: |
          ulimit -a
          ulimit -n 512
          ulimit -a

      - name: Run tests with pytest
        run: pytest ${{ matrix.test-path }}
        continue-on-error: true

      - name: Rename the code coverage result file
        run: mv ./.coverage ./.coverage.unit-test-core.${{ matrix.os }}-${{ matrix.python-version }}

      - name: Upload code coverage result file
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: .coverage.unit-test-core.${{ matrix.os }}-${{ matrix.python-version }}
          if-no-files-found: error


  unit-test-persistence:
    needs: prep-testbed-unit-test-persistence
    env:
      DATABASE_DRIVER: mysql
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: root
      DB_DATABASE: tw_stock

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
          - 33060:33060
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.6, 3.7,3.8,3.9,'3.10']
        os: [ubuntu-18.04,ubuntu-latest]
        exclude:
          - os: ubuntu-18.04
            python-version: 3.7
          - os: ubuntu-18.04
            python-version: 3.9
          - os: ubuntu-latest
            python-version: 3.6
          - os: ubuntu-latest
            python-version: 3.8
        test-path: ${{fromJson(needs.prep-testbed-unit-test-persistence.outputs.matrix)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Waiting for MySQL to be ready
        run: bash scripts/wait_database_ready.sh

      - name: Test MySQL connection
        run: bash scripts/database-execution.sh show_databases

      - name: Create database
        run: bash scripts/database-execution.sh create_database

      - name: Create table for saving testing data
        run: bash scripts/database-execution.sh create_table

      - name: Insert testing data
        run: bash scripts/database-execution.sh insert_test_data_rows

      - name: Cache Python Runtime environment and dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('*requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup Python ${{ matrix.python-version }} in  ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python ${{ matrix.python-version }} dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install codecov
          pip install -U pytest
          pip install -U pytest-cov
          pip install pytest-rerunfailures
          pip install mysql-connector-python
          pip install -r dev-requirements.txt

      - name: Run tests with pytest
        run: pytest ${{ matrix.test-path }}
        continue-on-error: true

      - name: Rename the code coverage result file
        run: mv ./.coverage ./.coverage.unit-test-persistence.${{ matrix.os }}-${{ matrix.python-version }}

      - name: Upload code coverage result file
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: .coverage.unit-test-persistence.${{ matrix.os }}-${{ matrix.python-version }}
          if-no-files-found: error


  unit-test-codecov:
    needs: [unit-test-core, unit-test-persistence]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download code coverage result file
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: .coverage.unit-test*

      - name: Install Python tool 'coverage'
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install coverage

      - name: Combine all code coverage result files
        run: coverage combine .coverage.*

      - name: Report testing coverage of project code
        run: coverage report -m


  prep-testbed-integration-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash scripts/get-integration-test-paths.sh unix)"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}


  integration-test:
    needs: prep-testbed-integration-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.6, 3.7,3.8,3.9,'3.10']
        os: [ubuntu-18.04,ubuntu-latest, macos-10.15, macos-latest]
        exclude:
          - os: ubuntu-18.04
            python-version: 3.7
          - os: ubuntu-18.04
            python-version: 3.9
          - os: ubuntu-latest
            python-version: 3.6
          - os: ubuntu-latest
            python-version: 3.8
          - os: macos-10.15
            python-version: 3.6
          - os: macos-10.15
            python-version: 3.8    # Pickle Issue
          - os: macos-latest
            python-version: 3.7
          - os: macos-latest
            python-version: 3.8    # Pickle Issue
        test-path: ${{fromJson(needs.prep-testbed-integration-test.outputs.matrix)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Python Runtime environment and dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('*requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup Python ${{ matrix.python-version }} in  ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python ${{ matrix.python-version }} dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install codecov
          pip install -U pytest
          pip install -U pytest-cov
          pip install pytest-rerunfailures
          pip install mysql-connector-python
          pip install -r dev-requirements.txt

      - name: Run tests with pytest
        run: pytest ${{ matrix.test-path }}
        continue-on-error: true

      - name: Rename the code coverage result file
        run: mv ./.coverage ./.coverage.integration-test.${{ matrix.os }}-${{ matrix.python-version }}

      - name: Upload code coverage result file
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: .coverage.integration-test.${{ matrix.os }}-${{ matrix.python-version }}
          if-no-files-found: error


  integration-test-codecov:
    needs: integration-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download code coverage result file
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: .coverage.integration-test*

      - name: Install Python tool 'coverage'
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install coverage

      - name: Combine all code coverage result files
        run: coverage combine .coverage.*

      - name: Report testing coverage of project code
        run: coverage report -m


  codecov_finish:
    needs: [unit-test-codecov, integration-test-codecov]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download code coverage result file
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: .coverage.*

      - name: Install Python tool 'coverage'
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install coverage

      - name: Combine all code coverage result files
        run: coverage combine .coverage.*

      - name: Report testing coverage of project code
        run: coverage report

      # This usage be refer from https://about.codecov.io/blog/python-code-coverage-using-github-actions-and-codecov/
      - name: Upload testing coverage of project code to Codecov
        uses: codecov/codecov-action@v2
        with:
          name: multirunnable-codecov
          token: ${{ secrets.CODECOV_TOKEN }}   # The token of project MultiRunnable in codecov
          file: .coverage
          env_vars: OS,PYTHON
          fail_ci_if_error: true   # optional (default = false)
          verbose: true    # optional (default = false)


  build_package:
    needs: codecov_finish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install -U setuptools
          pip install wheel

      - name: Compile and package the code as Python package formatter
        run: python3 setup.py sdist bdist_wheel

      - name: Upload Python package files
        uses: actions/upload-artifact@v3
        with:
          name: MultiRunnable-Python-Package
          path: ./dist/MultiRunnable-*
          if-no-files-found: error


  final_check:
    env:
      MultiRunnableVersion: 0.17.0a2

    needs: build_package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download Python package files
        uses: actions/download-artifact@v3
        with:
          name: MultiRunnable-Python-Package
          path: ./dist/MultiRunnable-*
          if-no-files-found: error

      - name: Install MultiRunnable with .whl file via 'pip'
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install ./dist/MultiRunnable-$MultiRunnableVersion-py3-none-any.whl

      - name: Show the Python package information
        run: pip show multirunnable

      - name: Test to run script with package 'multirunnable' in command lines
        run: |
          import multirunnable as mr
          import time
          Workers_Number = 5
          executor = mr.SimpleExecutor(mode=mr.RunningMode.Concurrent, executors=Workers_Number)
          executor.run(function=lambda a: print(f"param: {a}, time: {time.time()}"), args={"index": f"test_arg"})
        shell: python

      - name: Test to run script with package 'multirunnable' with Python file
        run: python3 ./scripts/mr_script.py

