name: Testing by 'develop'

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop


jobs:
  prep-testbed-core:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash scripts/get-unit-test-core-paths.sh)"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}


  prep-testbed-persistence:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash scripts/get-unit-test-persistence-paths.sh)"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}


  unit-test-core:
    needs: prep-testbed-core
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.6, 3.7,3.8,3.9,'3.10']
        os: [ubuntu-18.04,ubuntu-latest, macos-10.15, macos-latest]
        exclude:
          - os: ubuntu-18.04
            python-version: 3.7
          - os: ubuntu-18.04
            python-version: 3.9
          - os: ubuntu-latest
            python-version: 3.6
          - os: ubuntu-latest
            python-version: 3.8
          - os: macos-10.15
            python-version: 3.6
          - os: macos-10.15
            python-version: 3.8    # Pickle Issue
          - os: macos-latest
            python-version: 3.7
          - os: macos-latest
            python-version: 3.9
        test-path: ${{fromJson(needs.prep-testbed-core.outputs.matrix)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Python Runtime environment and dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('*requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup Python ${{ matrix.python-version }} in  ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python ${{ matrix.python-version }} dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install codecov
          pip install -U pytest
          pip install -U pytest-cov
          pip install pytest-rerunfailures
          pip install -r dev-requirements.txt

      - name: Change the setting of option *open files* of resource limit
        run: |
          ulimit -a
          ulimit -n 512
          ulimit -a

      - name: Run tests with pytest
        run: pytest ${{ matrix.test-path }}
        continue-on-error: true

      - name: Rename the code coverage result file
        run: mv ./.coverage ./.coverage.unit-test-core.${{ matrix.os }}-${{ matrix.python-version }}

      - name: Upload code coverage result file
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: .coverage.unit-test-core.${{ matrix.os }}-${{ matrix.python-version }}
          if-no-files-found: error


  unit-test-persistence:
    needs: prep-testbed-persistence
    env:
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: root
      DB_DATABASE: tw_stock

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
          - 33060:33060
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.6, 3.7,3.8,3.9,'3.10']
        os: [ubuntu-18.04,ubuntu-latest]
        exclude:
          - os: ubuntu-18.04
            python-version: 3.7
          - os: ubuntu-18.04
            python-version: 3.9
          - os: ubuntu-latest
            python-version: 3.6
          - os: ubuntu-latest
            python-version: 3.8
        test-path: ${{fromJson(needs.prep-testbed-persistence.outputs.matrix)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

#      - name: Set up MySQL database
#        run: |
#          sudo /etc/init.d/mysql start
##          mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}

#      - name: Install MySQL driver connection tool
#        run: |
#            sudo apt-get update
#            sudo apt-get install -y default-mysql-client

      - name: Waiting for MySQL to be ready
        run: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 10
            done
            echo Failed waiting for MySQL && exit 1

      - name: Test MySQL connection
        run: mysql -h ${{ env.DB_HOST }} -u ${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} --execute="show databases;"

      - name: Create database
        run: |
            mysql -h ${{ env.DB_HOST }} -u ${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} --execute="CREATE DATABASE tw_stock;"

      - name: Create table for saving testing data
        run: |
            mysql -h ${{ env.DB_HOST }} -u ${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} --execute="
                CREATE TABLE IF NOT EXISTS tw_stock.stock_data_2330 (
                                                               stock_date DATETIME NOT NULL,
                                                               trade_volume DECIMAL(12,4) NOT NULL,
                                                               turnover_price DECIMAL(16,4) NOT NULL,
                                                               opening_price DECIMAL(8,4) NOT NULL,
                                                               highest_price DECIMAL(8,4) NOT NULL,
                                                               lowest_price DECIMAL(8,4) NOT NULL,
                                                               closing_price DECIMAL(8,4) NOT NULL,
                                                               gross_spread DECIMAL(8,4) NOT NULL,
                                                               turnover_volume DECIMAL(12,4) NOT NULL,
                                                               PRIMARY KEY(stock_date)) DEFAULT CHARSET=utf8;"

      - name: Insert testing data
        run: |
            mysql -h ${{ env.DB_HOST }} -u ${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-02 00:00:00' , 32900482 , 7276419230 ,226.5000 ,226.5000 , 219.0000, 219.5000 ,-6.00 , 12329);"
            mysql -h ${{ env.DB_HOST }} -u ${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-03 00:00:00' , 34615620 , 7459051790 ,214.0000 ,218.0000 , 214.0000 ,215.5000 ,-4.00 , 14549);"
            mysql -h ${{ env.DB_HOST }} -u ${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-04 00:00:00' , 67043521 ,13987136785 ,211.5000 ,211.5000 , 206.5000 ,208.0000 ,-7.50 , 28786);"
            mysql -h ${{ env.DB_HOST }} -u ${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-07 00:00:00' , 35695176 , 7591116569 ,212.0000 ,214.0000 , 211.0000 ,213.0000 ,+5.00 , 11224);"
            mysql -h ${{ env.DB_HOST }} -u ${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-08 00:00:00' , 23794481 , 5019703557 ,212.0000 ,212.5000 , 210.0000 ,211.0000 ,-2.00 , 9377);"
            mysql -h ${{ env.DB_HOST }} -u ${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} --execute="
                INSERT INTO tw_stock.stock_data_2330 (stock_date, trade_volume, turnover_price, opening_price, highest_price, lowest_price, closing_price, gross_spread, turnover_volume)
                    VALUES ('0108-01-09 00:00:00' , 51255446 ,11006827093 ,212.0000 ,216.5000 , 211.0000 ,215.5000 ,+4.50 , 14098);"

      - name: Cache Python Runtime environment and dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('*requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup Python ${{ matrix.python-version }} in  ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python ${{ matrix.python-version }} dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install codecov
          pip install -U pytest
          pip install -U pytest-cov
          pip install pytest-rerunfailures
          pip install mysql-connector-python
          pip install -r dev-requirements.txt

      - name: Run tests with pytest
        run: pytest ${{ matrix.test-path }}
        continue-on-error: true

      - name: Rename the code coverage result file
        run: mv ./.coverage ./.coverage.unit-test-persistence.${{ matrix.os }}-${{ matrix.python-version }}

      - name: Upload code coverage result file
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: .coverage.unit-test-persistence.${{ matrix.os }}-${{ matrix.python-version }}
          if-no-files-found: error


  unit-test-codecov:
    needs: [unit-test-core, unit-test-persistence]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download code coverage result file
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: .coverage.*

      - name: Install Python tool 'coverage'
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install coverage

      - name: Combine all code coverage result files
        run: coverage combine .coverage.*

      - name: Display testing coverage of project code
        run: coverage report -m


  integration-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.6, 3.7,3.8,3.9,'3.10']
        os: [ubuntu-18.04,ubuntu-latest]
        exclude:
          - os: ubuntu-18.04
            python-version: 3.7
          - os: ubuntu-18.04
            python-version: 3.9
          - os: ubuntu-latest
            python-version: 3.6
          - os: ubuntu-latest
            python-version: 3.8

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Python Runtime environment and dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('*requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup Python ${{ matrix.python-version }} in  ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python ${{ matrix.python-version }} dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install codecov
          pip install -U pytest
          pip install -U pytest-cov
          pip install pytest-rerunfailures
          pip install mysql-connector-python
          pip install -r dev-requirements.txt

#      - name: Run tests with pytest
#        run: pytest
#
#      - name: Rename the code coverage result file
#        run: mv ./.coverage ./.coverage.integration.${{ matrix.os }}-${{ matrix.python-version }}
#
#      - name: Upload code coverage result file
#        uses: actions/upload-artifact@v3
#        with:
#          name: coverage
#          path: .coverage.integration.${{ matrix.os }}-${{ matrix.python-version }}
#          if-no-files-found: error


  database-compatibility-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.6, 3.7,3.8,3.9,'3.10']
        os: [ubuntu-latest]
#        exclude:
#          - os: ubuntu-latest
#            python-version: 3.6
#          - os: ubuntu-latest
#            python-version: 3.8

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Python Runtime environment and dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('*requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup Python ${{ matrix.python-version }} in  ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python ${{ matrix.python-version }} dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install codecov
          pip install -U pytest
          pip install -U pytest-cov
          pip install pytest-rerunfailures
          pip install mysql-connector-python
          pip install -r dev-requirements.txt

#      - name: Run tests with pytest
#        run: pytest
#
#      - name: Rename the code coverage result file
#        run: mv ./.coverage ./.coverage.database-compatibility.${{ matrix.os }}-${{ matrix.python-version }}
#
#      - name: Upload code coverage result file
#        uses: actions/upload-artifact@v3
#        with:
#          name: coverage
#          path: .coverage.database-compatibility.${{ matrix.os }}-${{ matrix.python-version }}
#          if-no-files-found: error


  total_codecov_finish:
    needs: [unit-test-codecov, integration-test, database-compatibility-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download code coverage result file
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: .coverage.*

      - name: Install Python tool 'coverage'
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install coverage

      - name: Combine all code coverage result files
        run: coverage combine .coverage.*

      - name: Display testing coverage of project code
        run: coverage report

